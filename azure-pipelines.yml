# Starter pipeline
# Start with a minimal pipeline that you can customize to build and deploy your code.
# Add steps that build, run tests, deploy, and more:
# https://aka.ms/yaml

trigger:
- none

pool:
  name: 'pool_linux_01'
  demands:
  - agent.name -equals vm-agent-linux-01
  - java
  - maven  

variables:
  NODE_EXTRA_CA_CERTS: /usr/local/share/ca-certificates/sonar.crt

steps:
- task: SonarQubePrepare@7
  inputs:
    SonarQube: 'sc_sonar_myshuttle'
    scannerMode: 'cli'
    configMode: 'manual'
    cliProjectKey: 'MyShuttle'
    cliProjectName: 'MyShuttle'
    cliSources: '.'

- task: SonarQubeAnalyze@7
  inputs:
    jdkversion: 'JAVA_HOME'

- task: SonarQubePublish@7
  inputs:
    pollingTimeoutSec: '300'

- task: Maven@3
  displayName: Maven
  inputs:
    mavenPomFile: 'pom.xml'
    publishJUnitResults: true
    testResultsFiles: '**/TEST-*.xml'
    testRunTitle: 'MyShuttle'
    codeCoverageToolOption: 'JaCoCo'
    codeCoverageClassFilesDirectories: 'src/main'
    javaHomeOption: 'JDKVersion'
    mavenVersionOption: 'Default'
    mavenAuthenticateFeed: true
    effectivePomSkip: false
    sonarQubeRunAnalysis: false

- task: CopyFiles@2
  displayName: 'Copy Files'
  inputs:
    SourceFolder: '$(build.sourcesdirectory)/target'
    Contents: '**/*.war'
    TargetFolder: '$(build.artifactstagingdirectory)'

- task: PublishBuildArtifacts@1
  displayName: 'Publish Artifact'
  inputs:
    PathtoPublish: '$(build.artifactstagingdirectory)'