# Starter pipeline
# Start with a minimal pipeline that you can customize to build and deploy your code.
# Add steps that build, run tests, deploy, and more:
# https://aka.ms/yaml

trigger:
- none

pool:
  name: 'pool_linux_01'
  demands:
  - agent.name -equals vm-agent-linux-01
  - java
  - maven  

variables:
  NODE_EXTRA_CA_CERTS: /usr/local/share/ca-certificates/sonar.crt

steps:

- script: |
    sudo apt-get update
    sudo apt-get install -y openjdk-11-jdk
    echo "##vso[task.setvariable variable=JAVA_HOME]/usr/lib/jvm/java-11-openjdk-amd64"
    echo "##vso[task.setvariable variable=PATH]/usr/lib/jvm/java-11-openjdk-amd64/bin:$(PATH)"
  displayName: "Instalar e configurar Java 11"

- task: Bash@3
  displayName: 'Detectar e exportar JAVA_HOME para o pipeline'
  inputs:
    targetType: 'inline'
    script: |
      set -e
      # localizar java
      JAVA_BIN=$(command -v java || true)
      if [ -z "$JAVA_BIN" ]; then
        echo "##vso[task.logissue type=error]java não encontrado no PATH do agente"
        exit 1
      fi

      # resolve o caminho real do binário e calcula JAVA_HOME
      JAVA_PATH=$(readlink -f "$JAVA_BIN")
      JAVA_HOME_DIR=$(dirname "$(dirname "$JAVA_PATH")")

      echo "Detected java binary: $JAVA_BIN"
      echo "Resolved java path: $JAVA_PATH"
      echo "Detected JAVA_HOME: $JAVA_HOME_DIR"

      # define variável do pipeline (disponível nos próximos steps como env var)
      echo "##vso[task.setvariable variable=JAVA_HOME]$JAVA_HOME_DIR"

      # também exporta pra etapa atual (útil se executar comandos nessa mesma step)
      export JAVA_HOME="$JAVA_HOME_DIR"
      export PATH="$JAVA_HOME/bin:$PATH"

      # debug rápido
      java -version
      echo "JAVA_HOME (env nesta step) = $JAVA_HOME"

- task: SonarQubePrepare@7
  inputs:
    SonarQube: 'sc_sonar_myshuttle'
    scannerMode: 'cli'
    configMode: 'manual'
    cliProjectKey: 'MyShuttle'
    cliProjectName: 'MyShuttle'
    cliSources: '.'

- task: SonarQubeAnalyze@7
  inputs:
    jdkversion: 'JAVA_HOME'

- task: SonarQubePublish@7
  inputs:
    pollingTimeoutSec: '300'

- task: Maven@3
  displayName: Maven
  inputs:
    mavenPomFile: 'pom.xml'
    publishJUnitResults: true
    testResultsFiles: '**/TEST-*.xml'
    testRunTitle: 'MyShuttle'
    codeCoverageToolOption: 'JaCoCo'
    codeCoverageClassFilesDirectories: 'src/main'
    javaHomeOption: 'JDKVersion'
    mavenVersionOption: 'Default'
    mavenAuthenticateFeed: true
    effectivePomSkip: false
    sonarQubeRunAnalysis: false

- task: CopyFiles@2
  displayName: 'Copy Files'
  inputs:
    SourceFolder: '$(build.sourcesdirectory)/target'
    Contents: '**/*.war'
    TargetFolder: '$(build.artifactstagingdirectory)'

- task: PublishBuildArtifacts@1
  displayName: 'Publish Artifact'
  inputs:
    PathtoPublish: '$(build.artifactstagingdirectory)'